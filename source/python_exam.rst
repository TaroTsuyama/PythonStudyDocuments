***********************************************************
Python3エンジニア認定基礎試験
***********************************************************

どんな試験？
###########################################################

.. line-block::
    :class: mb0

    Python 3 エンジニア認定基礎試験とは、一般社団法人 Python エンジニア育成推進協会が主催している Python の基礎知識を問う試験です。
    全 40 問の選択式で、合格ラインは正答率 70% です。

    詳細はこちら。
    https://www.pythonic-exam.com/exam/basic

|
|
|

この資格を取得する意味とは
###########################################################

.. line-block::
    :class: mb0

    率直なところ、この資格だけ持っていても対外的に技術力を有しているというアピールにはあまりならないと考えています。
    では、なぜこの資格取得を推奨しているかというと下記のような点が挙げられます。

* 職務経歴書に書く資格が一つ増える
* Pythonの基礎が習得できる
* 基本情報技術者試験の午後問題対策ができる
* 一つ言語を習得できれば他言語の習得もスムーズになる
* 資格報奨金がもらえる

一点ずつ解説していきます。

職務経歴書に書く資格が一つ増える
***********************************************************

.. line-block::
    :class: mb0

    職務経歴書は今までどのような業務を行っていたかということが重要になりますが、未経験の人は書くことがそんなに多くないかと思います。

    そこで、資格欄に取得した資格を記載することでどんなことを学んできたかというアピールにはなると思います。
    例えば、ある技術を有していてもそれに関する資格の有無で説得力は違ってくるでしょう。

    何よりも、所持している資格が増えるということは自信につながるはずです。
    

Pythonの基礎が習得できる
***********************************************************

.. line-block::
    :class: mb0

    Python 3 エンジニア認定基礎試験は Python の基礎的な知識を問う問題で構成されているので、試験勉強を通して Python の知識を高めることができます。
 
基本情報技術者試験の午後問題対策ができる
***********************************************************

.. line-block::
    :class: mb0

    2020 年から基本情報技術者試験の午後問題では COBOL の問題が廃止され、新たに Python の問題が出題されます。
    午後問題はいくつかある問題のうち 5 問選択して回答する方式なので Python の問題を選択しなくてもいいのですが、Python の知識があれば大分有利になると思います。

    サンプル問題も公開されています。
    https://www.jitec.ipa.go.jp/1_13download/fe_python_sample.pdf
 
一つ言語を習得できれば他言語の習得もスムーズになる
***********************************************************

.. line-block::
    :class: mb0

    プログラミング言語の文法や仕様は言語ごとに異なりますが、基本的な考え方は共通する部分が多くありますので一つ言語を習得できれば他言語の習得もスムーズになるという考えが一般的です。
 
資格報奨金がもらえる
***********************************************************

.. line-block::
    :class: mb0

    Python 3 エンジニア認定基礎試験の受験料は 10000 円 (税別) と決して安くはありませんが、ジョブクラウンでは試験に合格した場合に限り受験料が戻ってくるし、それとは別に資格報奨金がもらえます。
    Python を学ぶことができて、ついでにお金がもらえると考えればモチベーションになる人もいるでしょう。

|
|
|

勉強方法
###########################################################

.. line-block::
    :class: mb0

    Python 3 エンジニア認定基礎試験は主教材としてオライリー・ジャパン「Pythonチュートリアル 第3版」という書籍を指定しています。
    これはいわゆる Python の入門書といったものなので、同様の入門書をすでに持っている場合は新たに購入する必要はないかと思います。

    なお、Python 勉強会: ひよこコース ではこういった書籍を購入しなくても試験合格に必要なだけの知識の習得ができる構成になっています。(合格者の実績もあります！)
    また、この試験は過去問題を公開していないのですが認定スクールで模擬試験を無料公開していますのでぜひ利用してください。

|
|
|

模擬試験に挑戦してみよう
###########################################################

.. line-block::
    :class: mb0

    認定スクールの Dive into Code というところで Python3エンジニア認定基礎模擬試験 β版 という模擬試験が公開されています。
    https://exam.diveintocode.jp/exam

    アカウントを登録する必要があるので、まずは登録してから模擬試験を開始しましょう。
    全体的に言えることなのですがわからない問題があった場合、まずは実際にコードを動かしてみると理解が早いと思います。

|
|
|

模擬試験の解説(抜粋)
###########################################################

.. line-block::

    Python3エンジニア認定基礎模擬試験 β版 のうち、比較的難しそうな問題について解説していきます。

解説1.
***********************************************************

.. line-block::
    :class: quotation

    Python インタープリタにて以下のように入力した場合の出力結果として正しいものを選びなさい。

    >>>import reprlib
    >>>reprlib.repr(set('diveintocode'))

    ・ Syntax Errorとなる。
    ・ "{'v', 'n', 't', 'c', ...}"
    ・ "{'c', 'd', 'e', 'i', 'n', 'o', ...}"
    ・ "{'d', 'e', 'i', 'o', ...}"

.. line-block::
    :class: mb0

    さっそくわけが分からない問題です。
    reprlib なんてライブラリは今のところ私は使ったことがありません。
    とりあえず対話モードで問題文のコードを実行してみましょう。

    "{'c', 'd', 'e', 'i', 'n', 'o', ...}" となりますね・・・。
    なんでこうなるのかさっぱりわかりません。
    公式ドキュメントを見てみましょう。
    https://docs.python.org/ja/3/library/reprlib.html

    このように書いてあります。

.. line-block::
    :class: quotation

    reprlib.repr(obj)
    これは aRepr の repr() メソッドです。同じ名前の組み込み関数が返す文字列と似ていますが、最大サイズに制限のある文字列を返します。

.. line-block::
    :class: mb0

    さらに、ページの中ほどを見ると下記のような記述があります。

.. line-block::
    :class: quotation

    Repr.maxlevel
    再帰的な表現を作る場合の深さ制限。デフォルトは 6 です。

.. line-block::
    :class: mb0

    つまり reprlib.repr() が返すのはイテラブルオブジェクトの項目数 6 個分までを表示してあとは省略したものということです。

    試しに下記を実行してみてください。

.. code-block:: python

    import reprlib
    reprlib.repr(list(range(100)))

.. line-block::
    :class: mb0

    '[0, 1, 2, 3, 4, 5, ...]' となったはずです。
    0 から 99 までのリストの先頭から 6 項目分を表示して、あとは省略されていますね。

    さて、この問題をさらに訳が分からなくしている元凶は間違いなく set でしょう。
    文字列を set に渡すと list と同様に、一文字ごとにばらしたイテラブルオブジェクトが作成されます。
    そして set は重複する項目を除外し、順序を保証しないという性質があります。

    何を言っているのかわからないかもしれませんが下記のコードを試してみてください。

.. code-block:: python

    set("jobcrown")

.. line-block::

    {'b', 'c', 'j', 'w', 'n', 'o', 'r'}となりました。(順番は必ずしもこの通りになるとは限りません。)
    重複する項目 (この例ではo) が一つ除外され、順番もばらばらになりました。
    このばらばらになった順番はランダムではなく、内部的なロジックによってこうなってしまうそうです。

    この問題を解くカギは、ばらばらになった文字の並びではなく表示されている項目数に注目するということです。
    選択肢の中で表示されている項目数が 6 個なのは一つだけですね。

    とてもナンセンスな問題です。


解説2.
***********************************************************

.. line-block::
    :class: quotation

    以下のプログラムをインタープリタにて実行した際の出力結果を選びなさい。

    [(x, y) for x in [0,1,2] for y in [1,2,3] if x != y]
    
    ・[(0, 1), (0, 2), (0, 3), (1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)]
    ・[(0, 1), (1, 1), (2, 1), (0, 2), (1, 2), (2, 2), (0, 3), (1, 3), (2, 3)]
    ・[(0, 1), (2, 1), (0, 2), (1, 2), (0, 3), (1, 3), (2, 3)]
    ・[(0, 1), (0, 2), (0, 3), (1, 2), (1, 3), (2, 1), (2, 3)]

.. line-block::
    :class: mb0

    これはリスト内包表記の問題です。
    内包表記は少し難しいと思いますが、慣れると結構便利なのでこの機会にぜひ覚えてみてください。

    基本的なリスト内包表記はこのように記述します。

.. code-block:: python

    [項目 for 変数 in イテラブルオブジェクト]

.. line-block::
    :class: mb0

    イテラブルオブジェクトのデータを一つずつ変数に格納して、リストの項目として列挙したリストが作成されます。
    この時点で何言ってんだという感じですが、試しに下記を実行してみてください。

.. code-block:: python

    li = [c for c in "jobcrown"]
    print(li)

.. line-block::
    :class: mb0

    ['j', 'o', 'b', 'c', 'r', 'o', 'w', 'n'] こうなりますね。
    list("jobcrown") でいいんじゃないかって思いました？まったくその通りです。

    では、こうしてみてください。

.. code-block:: python

    li = [c.upper() for c in "jobcrown"]
    print(li)

.. line-block::
    :class: mb0

    ['J', 'O', 'B', 'C', 'R', 'O', 'W', 'N'] こうなりましたね。

    さらにこうしてみましょう。

.. code-block:: python

    li = [(c.upper(),c) for c in "jobcrown"]
    print(li)

.. line-block::
    :class: mb0

    なんとなくわかりましたか？
    つまり項目の部分でいろいろできるということです。

    リスト内包表記では条件文も使用できます。

.. code-block:: python

    [項目 for 変数 in イテラブルオブジェクト if 条件文]

.. line-block::
    :class: mb0

    else も使えますが書き方が少し変わります。

.. code-block:: python

    [項目 if 条件文 else elseの場合の項目 for 変数 in イテラブルオブジェクト]

.. line-block::
    :class: mb0

    こんな風に使います。

.. code-block:: python

    li1 = [c for c in "jobcrown" if ord(c)>= 100]
    li2 = [c if ord(c)>= 100 else "*" for c in "jobcrown"]
    print(li1)
    print(li2)

.. line-block::
    :class: mb0

    上記では li1 は jobcrown という文字列のうち Unicode のコードポイントが 100 以上の文字だけを列挙したリストで、li2 は Unicode のコードポイントが 100 より小さいものを * にしたものを列挙したリストになります。

    ここまでくれば内包表記はマスターしたも同然です。
    問題文に戻ってみましょう。
    for が二つありますね。
    これは for 文で入れ子を作った時と同様の動作をします。
    つまり、内包表記において右側の for は左側の for の入れ子になっているというイメージです。
    
    この問題を通常の for 文、if 文で表現するとこんな感じになります。

.. code-block:: python

    li = []
    for x in [0,1,2]:
        for y in [1,2,3]:
            if x != y:
                li.append((x,y))


解説3.
***********************************************************

.. line-block::
    :class: quotation

    問題文のプログラムを実行した場合の、出力結果を選びなさい。

    print("出力結果:")
    try:
        raise Exception("開始前","Exception発生")
        print("開始")
    except IOError as msg:
        print("IOError発生:",msg.args[0])
    except Exception as msg:
        print("予期せぬ問題発生:",msg.args[1])
    else:
        print("Else表示")

    ・出力結果:予期せぬ問題発生:Exception発生
    ・出力結果:予期せぬ問題発生:開始前
    ・出力結果:IOError発生:開始前"
    ・出力結果:予期せぬ問題発生:開始前 Exception発生 Else表示

.. line-block::
    :class: mb0

    この問題のポイントは try 構文と例外処理です。

    try 構文はエラー(例外)が発生した場合と発生しない場合で処理を分岐させることができるものです。
    try 構文には以下のような節があります。

+------------+------------------------------------------------------------------------------------------------------------+
|try 節      |   実行したい処理を記述します                                                                               |
+------------+------------------------------------------------------------------------------------------------------------+
|except 節   |   try 節で例外が発生した場合の処理。例外クラスを指定するとそれに応じた例外が発生したときのみ処理を行う     |
+------------+------------------------------------------------------------------------------------------------------------+
|else 節     |   try 節で例外が発生しない場合の処理                                                                       |
+------------+------------------------------------------------------------------------------------------------------------+
|finally 節  |   上記すべての処理が終了したら実行される処理                                                               |
+------------+------------------------------------------------------------------------------------------------------------+

.. line-block::

    通常、処理中に何らかの例外が発生した場合、そこで処理を中断してエラーメッセージが表示されますが、try 構文を使用すれば例外が発生した場合でも状況に応じて処理を続行できるプログラムが作れます。

    次に例外クラスについて解説します。
    例外にも様々な種類があります。
    よく見るもは SyntaxError や TypeError などでしょうか。
    これらは **組込み例外** といわれる例外クラスです。
    https://docs.python.org/ja/3/library/exceptions.html
    
    クラスと名の付く通り、Python では例外もオブジェクトで定義されます。
    組込み例外には args というアトリビュートがあり、エラーメッセージなどを格納します。

    最後に raise 文について。
    raise 文は任意の例外を発生させることができます。

    以上を踏まえると、問題文の3行目で例外が発生し 7 行目の except に進み、8 行目を実行して処理を終了しているのがわかるでしょうか。


解説4.
***********************************************************

.. line-block::
    :class: quotation

    以下のプログラムを実行した際の出力結果を選びなさい。

    d = 'dive\ninto\ncode\t'

    print(len(d))

    ・15
    ・18
    ・12
    ・20

.. line-block::

    この問題のポイントはエスケープ文字です。
    エスケープ文字とは、いわゆる制御文字等の特殊な文字のことを言います。
    頭に\(バックスラッシュ)をつけた文字列がエスケープ文字として扱われます。
    
    下記はよく使うエスケープ文字です。

+---+-------------------+
|\n | 改行              |
+---+-------------------+
|\r | リターン          |
+---+-------------------+
|\t | タブ              |
+---+-------------------+
|\\ | バックスラッシュ  |
+---+-------------------+

.. line-block::

    エスケープ文字は 1 文字としてカウントされます。



解説.5
***********************************************************

.. line-block::
    :class: quotation

    以下のプログラムを実行した際の出力結果を選びなさい。

    import json
    x = {'name':'yamada','data':[2,3,4]}
    print(json.dumps(x))

    ・{"name":yamada, "data": [2, 3, 4]}
    ・{"name": "yamada", "data": [2, 3, 4]}
    ・{"name": "yamada", "data": ["2", "3", "4"]}
    ・{"name": "yamada", "data": "[2, 3, 4]"}

.. line-block::

    json とは JavaScript を元に作られたファイル形式で、Python だけでなく C や Java 等様々な言語で使用できるデータ交換用フォーマットです。
    json で使用できる値は下記の通りです。

    * ダブルクォーテーション(")囲まれた文字列
    * 数値
    * true
    * false
    * none
    * オブジェクト
    * 配列

    json でいうオブジェクトは Python でいうところのディクショナリ、配列はリストに相当します。


解説.6
***********************************************************

.. line-block::
    :class: quotation

    Python におけるタブ補完について正しいものを選択肢から選びなさい。
    
    ・変数とモジュール名の補完はPCの起動時に自動で有効になっており、[Tab]キーで補完機能が呼び出せる。
    ・変数とモジュール名の補完はPCの起動時に自動で有効になっており、[Tab]+[ctrl]キーで補完機能が呼び出せる。
    ・変数とモジュール名の補完はインタープリタの起動時に自動で有効になっており、[Tab]キーで補完機能が呼び出せる。
    ・変数とモジュール名の補完はインタープリタの起動時に自動で有効になっており、[Tab]+[ctrl]キーで補完機能が呼び出せる。

.. line-block::

    私の環境(標準インタプリタ)では Tab 補完ができないのですが、この問題は標準インタプリタについて言及しているのでしょうか・・・。
    IPython というインタプリタなら間違いなく Tab 補完が使用できます。
    この手の Tab 補完機能は通常、インタプリタ起動時に有効になります。

    ちなみに IPython は pip install ipython でインストールでき、コマンドプロンプト等から ipython で実行できます。


解説.7
***********************************************************

.. line-block::
    :class: quotation

    アクティベート状態から抜けるコマンドを選択肢から選びなさい。

    ・exit
    ・deactivate
    ・deactivate()
    ・exit()

.. line-block::


    アクティベート状態とは何かというと、仮想環境を実行している状態のことをいいます。
    アクティベート状態の仮想環境を終了するコマンドは deactivate です。
    
    豆知識問題ですね。



解説.8
***********************************************************

.. line-block::
    :class: quotation

    以下のプログラムを実行した際の出力結果として正しいものを選択しなさい。

    i = 10
    def num(arg=i):
        print(arg)
    i = 7
    num()

    ・7
    ・SyntaxErrorとなる。
    ・17
    ・10

.. line-block::
    :class: mb0

    この問題のポイントは変数のスコープです。
    変数を参照するときは、その直前で宣言された変数を参照します。
    例えば

.. code-block:: python

    a = 1
    a = 2
    print(a)

.. line-block::

    としたとき、3 行目の print 文に指定した変数 a は、その直前で宣言した a=2 を参照します。
    これは関数の中でも同様なのですが、関数内に対象の変数がない場合コード上でその関数が宣言されている以前に宣言されている変数を参照します。

    ここで問題文に戻ると、関数 num の引数が arg=i となっています。
    これは引数デフォルト値を変数 i として、関数呼び出し時に引数を指定しないとこの値を使用するということを意味しています。
    そして、この行の直前で変数 i を宣言している個所は i=10 のためこの値が参照されます。

    ちなみに関数呼び出し時に num(i) とした場合は、その直前の i=7 が関数に渡ります。


解説.9
***********************************************************

.. line-block::
    :class: quotation

    プログラムを実行し、下記の実行結果を得たい。

    2017-09-11

    下記のプログラムの(A)及び(B)に記述すべきコードの組み合わせを選択肢から選びなさい。

    from (A) import (B)
    now = date.today()
    print(now)

    ・ (A)datetime (B)date
    ・ (A)date (B)date
    ・ (A)date (B)datetime
    ・ (A)datetime (B)datetime

.. line-block::

    from A import Bで、A というモジュールの B というオブジェクトをインポートできます。
    日付や時間を扱うモジュールは datetime で、そのうち時間を扱うオブジェクトは date です。

|
|
|

受験までの流れと注意点
###########################################################

.. line-block::

    受験までの流れ
    Python 3 エンジニア認定基礎試験は全国のオデッセイコミュニケーションズ CBT テストセンターで受験できます。

    下記参照
    https://cbt.odyssey-com.co.jp/pythonic-exam.html#flow

    まず試験会場を選択し、試験日程を選びます。
    試験日程は会場によって違うので希望する会場の日程で都合がつかない場合は別の会場を選びましょう。
    申込みは選択した会場に直接申込む必要があります。

    次に Odyssey ID というものを登録する必要があります。
    また、ここで登録したIDとパスワードは試験の際に必要になりますので忘れないようにしましょう。

    試験は会場の PC から受験する方式で、選択問題が 40 問出題されます。
    試験が終了するとその場で結果が表示され、7 割以上正答で合格になります。
    合格した場合、合格証書は後日郵送されます。

試験当日に必要なものについて
***********************************************************

.. line-block::

    * Odyssey IDとパスワード
    * 受験票
    * 身分証明書

    大体どんな資格試験でも受験票と身分証明書は必須ですが、
    前述のとおりこの試験では Odyssey ID とパスワードが必要になります。

    受験票については会場によって発行されないところもあるようなので、会場ごとに確認する必要があります。
    私が受験したときは、申込時に表示された受験票画面を印字またはスマホ等の画面に表示して会場で提示する方式でした。


資格報奨金申請について
***********************************************************

.. line-block::
    :class: mb0

    試験に合格した場合、申請すれば受験料 + 資格報奨金がもらえます。
    申請には以下のものが必要になります。

    * 申請書
    * 合格証書のコピー
    * 受験料の領収書

    申請書のフォーマットは backlog にありますので各自ダウンロードしてください。

    合格証書は前述のとおり、後日郵送されます。
    試験終了後、試験結果を印字した紙を渡されます(会場によって異なるかもしれません)が、これは合格証書ではありません。

    また、受験料の領収書について受験料をクレジットカード払いで支払った場合、会場によっては領収書を発行してくれません。
    その場合、クレジットカードの明細が受験料の領収書代わりになりますので別途各自で用意する必要があります。
    現金払い等の場合でも会場によっては申請しないと受験料の領収書を発行してくれないようなので、会場ごとに確認する必要があります。

|
|
|

最後に
###########################################################

.. line-block::

    模擬試験で合格点を取れるようになればほぼ確実に合格できるはずです。
    ある程度自信がついてきたらぜひ本試験に挑戦してみてください。

    また、合格したら私(津山)にご一報いただけるとありがたいです。

    不明点等ありましたら随時質問ください。



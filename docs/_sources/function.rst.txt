***********************************************************
関数
***********************************************************

関数とは
###########################################################

.. line-block::
    :class: mb0

    プログラミング言語でいうところの関数とは「いくつかの処理をまとめて、ひとつの機能にしたもの」といえます。

    関数といえば Excel にもありますよね。
    あれも仕組みとしてはプログラミング言語の関数と同等のものです。

    例として Excel の SUM 関数を見てみましょう。
    これは渡したセルに含まれる数値の合計値を返すという関数です。

.. image:: _static/image019.png

.. line-block::
    :class: mb0

    この「渡す」とか「返す」といった概念が重要で関数に渡すデータのことを **引数（ひきすう）** 、関数が返すデータのことを **戻り値** または返り値といったりします。

    関数は引数でデータを入力して、関数の内部で処理を行ったデータを戻り値として出力するというのが最も一般的な形です。（引数や戻り値のない関数もあります）

.. image:: _static/image020.png


|
|
|


組込み関数
###########################################################

.. line-block::
    :class: mb0

    組込み関数とは、あらかじめ用意されている関数のことです。
    Python の組込み関数は下記ページに記載されています。
    https://docs.python.org/ja/3/library/functions.html

    よく使う組込み関数についていくつか紹介していきます。

print 関数
***********************************************************

.. line-block::
    :class: mb0

    引数で渡したデータをコンソールに表示する関数。
    この関数は戻り値がありません。

.. code-block:: python

    print("jobcrown") # 画面に文字を表示するだけで、戻り値は返さない。


abs 関数
***********************************************************

.. line-block::
    :class: mb0

    引数で渡した数値の絶対値を返す。

.. code-block:: python

    value1 = -10
    value2 = abs(value1) # abs 関数の戻り値を変数 value2 に代入
    print(value1, value2) # -10 10


len 関数
***********************************************************

.. line-block::
    :class: mb0

    引数で渡したイテラブルオブジェクトの要素数を返す。

.. code-block:: python

    value_list = [1,2,3,4,5]
    string = "jobcrown"
    print(len(value_list)) # 5
    print(len(string)) # 8


zip 関数
***********************************************************

.. line-block::
    :class: mb0

    二つのイテラブルオブジェクトの各項目を組み合わせたタプルを列挙したイテラブルオブジェクトを返す。
    (あまり使いませんが Python3 エンジニア認定基礎試験で出題されるので紹介します。)

.. code-block:: python

    value_list1 = [1,2,3,4,5]
    value_list2 = [6,7,8,9]
    string = "jobcrown"

    zip_obj1 = zip(value_list1, value_list2)
    zip_obj2 = zip(zip_obj1, string)

    print(list(zip_obj1)) # [(1, 6), (2, 7), (3, 8), (4, 9)]
    print(list(zip_obj2)) # [((1, 6), 'j'), ((2, 7), 'o'), ((3, 8), 'b'), ((4, 9), 'c')]


|
|
|

ユーザ定義関数
###########################################################

.. line-block::
    :class: mb0

    関数はユーザが自由に定義することもできます。
    関数の定義には **def 構文** を使用します。

.. code-block:: python

    def 関数名(引数):
        処理
        return 戻り値

.. line-block::
    :class: mb0

    例として下記のような「あいさつ関数」を定義してみましょう。

.. image:: _static/image021.png


.. code-block:: python

    def greeting(name):
        message = "こんにちは" + name + "さん"
        return message

    print(greeting("津山")) # こんにちは津山さん

位置引数とキーワード引数
***********************************************************

.. line-block::
    :class: mb0

    関数を呼び出すとき、引数を指定する方法として位置引数とキーワード引数というものがあります。

    例えば、下記のような関数を考えます。

.. code-block:: python

    def test_func(item_name, value, message):
        return f"商品名 : {item_name}\n価格 : {value}\n説明 : {message}"

.. line-block::
    :class: mb0

    関数を呼び出すとき、関数定義で定義してある引数 ( **仮引数** といいます) と同じ位置で引数を指定する方式を **位置引数** といいます。

.. code-block:: python

    print(test_func("商品A", 100, "これは商品Aです"))

.. line-block::
    :class: mb0

    関数を呼び出すときに 仮引数 = 引数 の形式で指定する方式を **キーワード引数** といいます。
    引数の位置は関数定義で定義してある仮引数の位置と違っていても問題ありません。

.. code-block:: python

    print(test_func(value="200", message="これは商品Bです", item_name="商品B"))

.. line-block::
    :class: mb0

    また、位置引数とキーワード引数は併用することができます。
    ただし、その場合は必ず位置引数を先に指定しなければいけません。

.. code-block:: python

    print(test_func("商品C", message="これは商品Cです", value="300"))

|
|
|

スコープ
###########################################################

.. line-block::
    :class: mb0

    関数の外からは関数の中の変数を参照することはできません。
    反対に、関数の中からは関数の外にある変数を参照できます。
    この仕組みをスコープといいます。

    分かりやすく説明すると、下図のような感じで関数の外からは関数の中は見えませんが関数の中からは関数の外が見えます。
    関数の外の変数をグローバル変数、関数の中の変数をローカル変数といいます。


.. image:: _static/image022.png


.. line-block::
    :class: mb0

    上図の関数F内で変数Aを上書きしている部分は、上書きというよりも関数内で再定義しているという表現の方が近いかもしれません。
    通常の変数の場合、関数内で上書きしても関数の外には影響ありませんが、
    リスト等の要素を変更した場合は関数の外でも反映されます。

.. code-block:: python

    arr = [1,2,3]
    def func1():
        arr[0] = 100

    func1()
    print(arr) # [100, 2, 3]

|
|
|

再帰
###########################################################

.. line-block::
    :class: mb0

    関数の中で、その関数自信を呼び出して繰り返し処理を行う再帰という手法があります。
    再帰を使うことで、より短いコードで処理を実行することができます。

    例えば、下記に階乗を計算する関数を示します。

.. code-block:: python

    def fact(num):
        if num > 0:
            return num * fact(num-1) # 関数 fact を再帰呼び出し
        else:
            return 1

    print(fact(3)) # 6
    print(fact(5)) # 120


.. line-block::
    :class: mb0

    再帰は直感的には分かりづらいですが、下図のような処理の流れになります。


.. image:: _static/image023.png


.. line-block::
    :class: mb0

    関数中に再帰呼び出しを行うとその関数での処理は一旦中断して呼び出された関数の処理に移ります。
    その関数の中でも再帰呼び出しが行われると、その処理も一旦中断して次の関数の処理...と進んでいきます。
    最終的に関数を終了する条件を満たすとひとつ前の関数に戻り値を返す処理を順次繰り返し、一番最初の関数まで戻っていき処理を終了します。

    中断した関数の処理は **スタック** というメモリ領域に保存されていきますが、関数の終了条件を誤ると永遠に再帰呼び出しが行われ、スタックの容量がいっぱいになってしまうスタックオーバーフローという状態になり、エラーとして処理が途中で終了してしまいます。

|
|
|

高階関数
###########################################################

.. line-block::
    :class: mb0

    引数として関数を受け取ったり、戻り値として関数を返したりする関数を **高階関数** といいます。
    例えば組込み関数の **filter 関数** は引数で関数を受け取る高階関数です。

.. code-block:: python

    filter(関数, イテラブルオブジェクト)

.. line-block::
    :class: mb0

    上記のように、第一引数に関数を、第二引数にイテラブルオブジェクトを指定します。
    この filter 関数はイテラブルオブジェクトの各要素から関数が True を返すものだけからなる filter オブジェクトというイテラブルオブジェクトを返します。

    以下に例を示します。

.. code-block:: python

    arr = [1,2,3,4,5,6]

    def is_odd(arg): # 引数が偶数の時 True を返す関数
        return arg % 2 == 0

    odd_list = list(filter(is_odd, arr)) # filter 関数は filter オブジェクトを返すので、list 関数でリストに変換している

    print(odd_list)

|
|
|

ラムダ式
###########################################################

.. line-block::
    :class: mb0

    ラムダ式（lambda 式）とは無名関数と呼ばれる関数で、一行で記述ができます。

lambda 引数: 戻り値

.. line-block::
    :class: mb0

    例えば、前節で例として示した関数 is_odd をラムダ式で記述すると以下のようになります。

.. code-block:: python

    lambda x: x%2 == 0

.. line-block::
    :class: mb0

    単純な処理の関数ならばラムダ式を使用することでコードをよりシンプルにすることができるのです。

.. code-block:: python

    arr = [1,2,3,4,5,6]

    odd_list = list(filter(lambda x: x%2 == 0, arr))

    print(odd_list) # [2, 4, 6]

|
|
|

おまけ
###########################################################

.. line-block::
    :class: mb0

    再帰を使い数独を解くサンプルプログラムを作ってみましたので遊んでみてください。

    まずは下記リンクを右クリックで保存しましょう。
    https://github.com/TaroTsuyama/py_study/raw/master/sudoku/sudoku_solver.py

    サンプルプログラムでは世界一難しい数独といわれる下記の問題を使用しています。
    https://gigazine.net/news/20100822_hardest_sudoku/

    数独の問題は下記のような2次元のリストで表現していて、空白マスは 0 としています。

.. code-block:: python

    sudoku = [
    [0,0,5,3,0,0,0,0,0],
    [8,0,0,0,0,0,0,2,0],
    [0,7,0,0,1,0,5,0,0],
    [4,0,0,0,0,5,3,0,0],
    [0,1,0,0,7,0,0,0,6],
    [0,0,3,2,0,0,0,8,0],
    [0,6,0,5,0,0,0,0,9],
    [0,0,4,0,0,0,0,3,0],
    [0,0,0,0,0,9,7,0,0],
    ]

.. line-block::
    :class: mb0

    この部分を書き換えればどんな数独の問題でも一瞬で解けてしまいますので色々触って試してみてください。
